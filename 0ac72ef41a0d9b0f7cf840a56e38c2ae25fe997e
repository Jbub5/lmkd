{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "db13c076_d1cc5585",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 18,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2023-09-21T21:02:28Z",
      "side": 1,
      "message": "Could you someone explain little bit more what\u0027s problem so why does we want to look at the pgskip?\n\nSimple example would be great to help .",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 18,
        "endChar": 12
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05a8e254_5e80348e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 18,
      "author": {
        "id": 1945302
      },
      "writtenOn": "2023-10-04T06:48:33Z",
      "side": 1,
      "message": "Hi,\n\n\u003e Could you someone explain little bit more what\u0027s problem so why does we want to look at the pgskip?\n\nThe patch serves primarily to make the LMKD more correct in watermark calculation by determining which zones are under memory pressure (we\u0027re considering pgskip as the factor for that). The consequence of this is that ULMK aggressiveness is infrequently increased to address the memory pressure. It\u0027s helped address some OOM and application concurrency issues seen earlier in our test farms.\n\n\u003e Simple example would be great to help .\n\nOur devices have the movable zone enabled. There are scenarios where, due to memory pressure from something allocating normal pages, movable zone pages are skipped during reclaim. Since at the moment memory pressure is mainly constrained to the normal zone, eliminating the skipped zone (even for one event handler iteration) makes the ULMK more aggressive so that the memory pressure is addressed. It\u0027s particularly helpful in scenarios where there are still a lot of free movable zone pages.\n\nUpdating the commit message with some of the above.",
      "parentUuid": "db13c076_d1cc5585",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 18,
        "endChar": 12
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3297c613_1c908167",
        "filename": "lmkd.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1685,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2023-09-22T16:04:03Z",
      "side": 1,
      "message": "I think this will return the incorrect index in following case:\n\n```\nstrncmp(\"DMA\", \"DMA32\", strlen(\"DMA\")) \u003d\u003d 0\n```\n\nSo it returns index 0 for DMA32 but should be 1.\n\nWe can probably also check the lengths or use cpp string comparison.",
      "range": {
        "startLine": 1685,
        "startChar": 8,
        "endLine": 1685,
        "endChar": 76
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4d5cadb_35287c53",
        "filename": "lmkd.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1685,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-09-22T16:14:19Z",
      "side": 1,
      "message": "yeah, should be:\n```\n  if ((len \u003d strlen(zone_names[i]) \u003d\u003d strlen(zone_name) \u0026\u0026\n      strncmp(zone_names[i], zone_name, len) \u003d\u003d 0)\n```",
      "parentUuid": "3297c613_1c908167",
      "range": {
        "startLine": 1685,
        "startChar": 8,
        "endLine": 1685,
        "endChar": 76
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dede3633_2239760c",
        "filename": "lmkd.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1685,
      "author": {
        "id": 1951160
      },
      "writtenOn": "2023-09-23T09:39:40Z",
      "side": 1,
      "message": "Oh missed the DMA/DMA32 case. Since the order of parsed zones in zoneinfo is the same as in zone_names[MAX_NR_ZONES], would just doing\n\n```\n  if (strncmp(zone_names[i], zone_name, strlen(zone_name)) \u003d\u003d 0)\n```\n\nalso do? With the above LMKD would never run into this case:\n\n```\nstrncmp(\"DMA\", \"DMA32\", strlen(\"DMA\")) \u003d\u003d 0\n```",
      "parentUuid": "d4d5cadb_35287c53",
      "range": {
        "startLine": 1685,
        "startChar": 8,
        "endLine": 1685,
        "endChar": 76
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8270916d_91e34e69",
        "filename": "lmkd.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1685,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2023-09-24T00:35:29Z",
      "side": 1,
      "message": "That would work too.",
      "parentUuid": "dede3633_2239760c",
      "range": {
        "startLine": 1685,
        "startChar": 8,
        "endLine": 1685,
        "endChar": 76
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2288222b_05c55a4d",
        "filename": "lmkd.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1685,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-09-25T15:59:07Z",
      "side": 1,
      "message": "It\u0027s a bit fragile, relying on the order of the names. I would prefer a more strict check.",
      "parentUuid": "8270916d_91e34e69",
      "range": {
        "startLine": 1685,
        "startChar": 8,
        "endLine": 1685,
        "endChar": 76
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc205e5d_0c5164ad",
        "filename": "lmkd.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1685,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2023-09-25T16:14:17Z",
      "side": 1,
      "message": "Right it would be dependent on order. I think we can use regular `strcmp()`, that also works as `\u0027\\0\u0027 !\u003d ?`",
      "parentUuid": "2288222b_05c55a4d",
      "range": {
        "startLine": 1685,
        "startChar": 8,
        "endLine": 1685,
        "endChar": 76
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50674e04_84adc8dc",
        "filename": "lmkd.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1685,
      "author": {
        "id": 1945302
      },
      "writtenOn": "2023-10-04T06:48:33Z",
      "side": 1,
      "message": "Done, using Suren\u0027s suggestion.",
      "parentUuid": "dc205e5d_0c5164ad",
      "range": {
        "startLine": 1685,
        "startChar": 8,
        "endLine": 1685,
        "endChar": 76
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f9d2f78_98076150",
        "filename": "lmkd.cpp",
        "patchSetId": 19
      },
      "lineNbr": 2641,
      "author": {
        "id": 1499410
      },
      "writtenOn": "2023-09-21T20:58:36Z",
      "side": 1,
      "message": "AFAICT this is null and read_all() doesn\u0027t do any buffer allocation?\n\nDo I misunderstand?",
      "range": {
        "startLine": 2641,
        "startChar": 23,
        "endLine": 2641,
        "endChar": 26
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36ba22c1_7eb9fee2",
        "filename": "lmkd.cpp",
        "patchSetId": 19
      },
      "lineNbr": 2641,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2023-09-21T21:01:31Z",
      "side": 1,
      "message": "Yes, this is an issue.",
      "parentUuid": "4f9d2f78_98076150",
      "range": {
        "startLine": 2641,
        "startChar": 23,
        "endLine": 2641,
        "endChar": 26
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c37f76c_23a3fc81",
        "filename": "lmkd.cpp",
        "patchSetId": 19
      },
      "lineNbr": 2641,
      "author": {
        "id": 1945302
      },
      "writtenOn": "2023-10-04T06:48:33Z",
      "side": 1,
      "message": "Done, removed the NULL.",
      "parentUuid": "36ba22c1_7eb9fee2",
      "range": {
        "startLine": 2641,
        "startChar": 23,
        "endLine": 2641,
        "endChar": 26
      },
      "revId": "0ac72ef41a0d9b0f7cf840a56e38c2ae25fe997e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}