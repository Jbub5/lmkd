{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a23e738f_4d627eb8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-14T18:10:26Z",
      "side": 1,
      "message": "I still need to review next patch so I don\u0027t know how you refactor the producer/consumer model in next patch. I think this patch wouldn\u0027t be needed if you change the model into pool in next patch. Just land producer/consumer model here with a thread.\n\nActually, I expected you coded like this.\n\nmain thread:\nvictim \u003d get_victim_process;\nadd_victim_to_killpool(victim);\n\nkill thread:\nwhile ()\n{\n   victim \u003d get_victim_process();\n   kill_victim and process_mrelease   \n}\n\nThe kill thread is just one in this patch and you may add threadpool in next patch.\n\n",
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5466a418_82fdd100",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2052,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2021-12-14T20:48:51Z",
      "side": 1,
      "message": "any reason we don\u0027t use condition_variable from c++? any obvious additional overhead?",
      "range": {
        "startLine": 2052,
        "startChar": 4,
        "endLine": 2052,
        "endChar": 19
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5da54638_61b2f895",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2052,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2021-12-14T20:59:41Z",
      "side": 1,
      "message": "I want to keep lmkd as small as possible unless absolutely required. I\u0027m guessing c++ classes will add some additional size.",
      "parentUuid": "5466a418_82fdd100",
      "range": {
        "startLine": 2052,
        "startChar": 4,
        "endLine": 2052,
        "endChar": 19
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "506c06c3_b95db750",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2052,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-14T21:10:09Z",
      "side": 1,
      "message": "My view is I agree lmkd as much as not \"blockable\" but don\u0027t agree keep lmkd as small as possible, esp, if you concerned about c++ classes.\nRather than that, I vote code more clear/clean if we achieve it from c++ concepts/libraries.",
      "parentUuid": "5da54638_61b2f895",
      "range": {
        "startLine": 2052,
        "startChar": 4,
        "endLine": 2052,
        "endChar": 19
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e7237cc_42724b1d",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2052,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-14T21:14:22Z",
      "side": 1,
      "message": "Needed to clarify: I am not saying we should use \"c++ conditional variable\" here but just \"let\u0027s not afraid to use c++\" due to size concern.",
      "parentUuid": "506c06c3_b95db750",
      "range": {
        "startLine": 2052,
        "startChar": 4,
        "endLine": 2052,
        "endChar": 19
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d64dbe1_d25bd95d",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2052,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2021-12-14T23:46:29Z",
      "side": 1,
      "message": "we already linked to those libraries, so probably not a big jump. What I can tell is if we have plan to port this back to kernel, then make it more C like is probably beneficial for that potential.",
      "parentUuid": "8e7237cc_42724b1d",
      "range": {
        "startLine": 2052,
        "startChar": 4,
        "endLine": 2052,
        "endChar": 19
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8c8047c_c410edb6",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2052,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-15T00:23:01Z",
      "side": 1,
      "message": "For me, either way is fine if we could improve code more clear.",
      "parentUuid": "8d64dbe1_d25bd95d",
      "range": {
        "startLine": 2052,
        "startChar": 4,
        "endLine": 2052,
        "endChar": 19
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3041b468_1d2cde81",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2102,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-14T18:10:26Z",
      "side": 1,
      "message": "Please consider something like this\n\npthread_mutex_lock(\u0026reaper.req_mutex)\nif ((reaper.pidfd !\u003d -1)) {\n  pthread_mutex_unlock(\u0026reaper.req_mutex);\n  return false;\n}\n\nreaper.pidfd \u003d dup(pidfd);\n..\n..\n\nearly bailout makes code more readable, IMHO.",
      "range": {
        "startLine": 2102,
        "startChar": 4,
        "endLine": 2102,
        "endChar": 16
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23ee157c_8af90899",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2102,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2021-12-14T19:32:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3041b468_1d2cde81",
      "range": {
        "startLine": 2102,
        "startChar": 4,
        "endLine": 2102,
        "endChar": 16
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa395c4f_8c386008",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2118,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2021-12-14T20:43:49Z",
      "side": 1,
      "message": "wall clock is subject to change, this has lead to device frozen in the past,\n\nWe have pthread_cond_clockwait which supports CLOCK_MONOTONIC\n\nalso see https://reviews.llvm.org/rG5e37d7f9ff257ec62d733d3d94b11f03e0fe51ca for using the new API in C++",
      "range": {
        "startLine": 2118,
        "startChar": 18,
        "endLine": 2118,
        "endChar": 32
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa6bef20_2ce661ef",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2118,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2021-12-14T20:46:04Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fa395c4f_8c386008",
      "range": {
        "startLine": 2118,
        "startChar": 18,
        "endLine": 2118,
        "endChar": 32
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e695db4_02d44f5c",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2141,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-14T18:10:26Z",
      "side": 1,
      "message": "Why do you need this check with while loop? If so, please comment on it.",
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "823ce5d4_6ba38f3a",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2141,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2021-12-14T19:32:29Z",
      "side": 1,
      "message": "This is a standard way of using pthread_cond_wait() to handle spurious wakeups (see: https://pubs.opengroup.org/onlinepubs/009604599/functions/pthread_cond_timedwait.html). Don\u0027t think we need a comment because the pattern is very standard.",
      "parentUuid": "4e695db4_02d44f5c",
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "972fffe3_2190dd8e",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2154,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-14T18:10:26Z",
      "side": 1,
      "message": "I think get_reap_target doesn\u0027t need to be a function. Just inline them here which makes code more clear to read.",
      "range": {
        "startLine": 2154,
        "startChar": 16,
        "endLine": 2154,
        "endChar": 31
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba3d5332_7de87e97",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2154,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2021-12-14T19:32:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "972fffe3_2190dd8e",
      "range": {
        "startLine": 2154,
        "startChar": 16,
        "endLine": 2154,
        "endChar": 31
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4e6271c_eec96556",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2155,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-14T18:10:26Z",
      "side": 1,
      "message": "get_reap_target loops forever if pidfd is minus value so I think we don\u0027t have chance to get here.",
      "range": {
        "startLine": 2155,
        "startChar": 12,
        "endLine": 2155,
        "endChar": 17
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f59f5056_92b4d75f",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2155,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2021-12-14T19:32:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e4e6271c_eec96556",
      "range": {
        "startLine": 2155,
        "startChar": 12,
        "endLine": 2155,
        "endChar": 17
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96571e55_08574b9d",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2168,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-14T18:10:26Z",
      "side": 1,
      "message": "I think it\u0027s overkill since I don\u0027t see the lock is highly contended.",
      "range": {
        "startLine": 2167,
        "startChar": 0,
        "endLine": 2168,
        "endChar": 85
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ff463bf_0ec59a6c",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2168,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2021-12-14T19:32:29Z",
      "side": 1,
      "message": "It does make a difference in how many times process_mrelease can catch the process before it goes away when I was testing, so I prefer to keep it this way.",
      "parentUuid": "96571e55_08574b9d",
      "range": {
        "startLine": 2167,
        "startChar": 0,
        "endLine": 2168,
        "endChar": 85
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33a72e99_fb2779f4",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2171,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-14T18:10:26Z",
      "side": 1,
      "message": "let\u0027s cut down nested if conditions. The early cut off condition among several conditions makes code easier to understand since we don\u0027t need to consider several options as we are going through the code.\n\nIf you are concerning about the duplicated close function in each condition, we could move it to first line in the while loop with introducing a boolean.\n\nif (res) {\n  ALOGE(\"pidfd_send_signal %d failed: %s\", pidfd, strerror(errno));\n  close(pidfd);\n  continue;\n}\n\nif (process_mrelease()) {\n  ALOGE(\"process_mrelease %d failed: %s\", pidfd, strerror(errno));\n  close(pidfd);\n  continue;\n}\n\n..",
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a56fa6ba_2ab7d6dd",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2171,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2021-12-14T19:32:29Z",
      "side": 1,
      "message": "How about we use a goto:\n\nif (res) {\n  ALOGE(\"pidfd_send_signal %d failed: %s\", pidfd, strerror(errno));\n  goto skip;\n}\nif (process_mrelease()) {\n  ALOGE(\"process_mrelease %d failed: %s\", pidfd, strerror(errno));\n  goto skip;\n}\n...\nskip:\n  close(pidfd);\n  \n?",
      "parentUuid": "33a72e99_fb2779f4",
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc2dc81e_4672bd8a",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2171,
      "author": {
        "id": 1275554
      },
      "writtenOn": "2021-12-15T16:45:46Z",
      "side": 1,
      "message": "Yeah, I prefer goto style as kernel has proved how it\u0027s simple/efficient for error handling. I was just hesitant for android userspace c++ programming style doesn\u0027t allow it. If it\u0027s fine, yeah, I vote +1.",
      "parentUuid": "a56fa6ba_2ab7d6dd",
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8bee84d_70d41055",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3677,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2021-12-14T20:48:51Z",
      "side": 1,
      "message": "in the error case, should we  set vreap_support \u003d UNSUPPORTED; ?",
      "range": {
        "startLine": 3675,
        "startChar": 12,
        "endLine": 3677,
        "endChar": 13
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "015c705c_9abd3277",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3677,
      "author": {
        "id": 1157738
      },
      "writtenOn": "2021-12-14T20:59:41Z",
      "side": 1,
      "message": "I think we need a separate indicator since it\u0027s a different failure condition.\nIn the next patch this case handled naturally. If all threads in the pool fail to create the pool size will be 0 and the reaper_kill() will return false. Something similar is needed here. I\u0027ll fix that. Thanks!",
      "parentUuid": "c8bee84d_70d41055",
      "range": {
        "startLine": 3675,
        "startChar": 12,
        "endLine": 3677,
        "endChar": 13
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4ae1e3f_2eca206e",
        "filename": "lmkd.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3677,
      "author": {
        "id": 1105075
      },
      "writtenOn": "2021-12-14T23:46:29Z",
      "side": 1,
      "message": "sgtm, as long as we handle the case.",
      "parentUuid": "015c705c_9abd3277",
      "range": {
        "startLine": 3675,
        "startChar": 12,
        "endLine": 3677,
        "endChar": 13
      },
      "revId": "9025211e520feefb9014fb00bdeb1a114191d8e7",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}